// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock_schema_registry

import (
	"encoding/json"

	"github.com/ChargePi/chargeflow/pkg/ocpp"
	"github.com/ChargePi/chargeflow/pkg/schema_registry"
	"github.com/kaptinlin/jsonschema"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSchemaRegistry creates a new instance of MockSchemaRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemaRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemaRegistry {
	mock := &MockSchemaRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSchemaRegistry is an autogenerated mock type for the SchemaRegistry type
type MockSchemaRegistry struct {
	mock.Mock
}

type MockSchemaRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSchemaRegistry) EXPECT() *MockSchemaRegistry_Expecter {
	return &MockSchemaRegistry_Expecter{mock: &_m.Mock}
}

// GetSchema provides a mock function for the type MockSchemaRegistry
func (_mock *MockSchemaRegistry) GetSchema(ocppVersion ocpp.Version, action string) (*jsonschema.Schema, bool) {
	ret := _mock.Called(ocppVersion, action)

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 *jsonschema.Schema
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(ocpp.Version, string) (*jsonschema.Schema, bool)); ok {
		return returnFunc(ocppVersion, action)
	}
	if returnFunc, ok := ret.Get(0).(func(ocpp.Version, string) *jsonschema.Schema); ok {
		r0 = returnFunc(ocppVersion, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jsonschema.Schema)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(ocpp.Version, string) bool); ok {
		r1 = returnFunc(ocppVersion, action)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockSchemaRegistry_GetSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchema'
type MockSchemaRegistry_GetSchema_Call struct {
	*mock.Call
}

// GetSchema is a helper method to define mock.On call
//   - ocppVersion ocpp.Version
//   - action string
func (_e *MockSchemaRegistry_Expecter) GetSchema(ocppVersion interface{}, action interface{}) *MockSchemaRegistry_GetSchema_Call {
	return &MockSchemaRegistry_GetSchema_Call{Call: _e.mock.On("GetSchema", ocppVersion, action)}
}

func (_c *MockSchemaRegistry_GetSchema_Call) Run(run func(ocppVersion ocpp.Version, action string)) *MockSchemaRegistry_GetSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ocpp.Version
		if args[0] != nil {
			arg0 = args[0].(ocpp.Version)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSchemaRegistry_GetSchema_Call) Return(schema *jsonschema.Schema, b bool) *MockSchemaRegistry_GetSchema_Call {
	_c.Call.Return(schema, b)
	return _c
}

func (_c *MockSchemaRegistry_GetSchema_Call) RunAndReturn(run func(ocppVersion ocpp.Version, action string) (*jsonschema.Schema, bool)) *MockSchemaRegistry_GetSchema_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterSchema provides a mock function for the type MockSchemaRegistry
func (_mock *MockSchemaRegistry) RegisterSchema(ocppVersion ocpp.Version, action string, rawSchema json.RawMessage, opts ...schema_registry.Option) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ocppVersion, action, rawSchema, opts)
	} else {
		tmpRet = _mock.Called(ocppVersion, action, rawSchema)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RegisterSchema")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ocpp.Version, string, json.RawMessage, ...schema_registry.Option) error); ok {
		r0 = returnFunc(ocppVersion, action, rawSchema, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSchemaRegistry_RegisterSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterSchema'
type MockSchemaRegistry_RegisterSchema_Call struct {
	*mock.Call
}

// RegisterSchema is a helper method to define mock.On call
//   - ocppVersion ocpp.Version
//   - action string
//   - rawSchema json.RawMessage
//   - opts ...schema_registry.Option
func (_e *MockSchemaRegistry_Expecter) RegisterSchema(ocppVersion interface{}, action interface{}, rawSchema interface{}, opts ...interface{}) *MockSchemaRegistry_RegisterSchema_Call {
	return &MockSchemaRegistry_RegisterSchema_Call{Call: _e.mock.On("RegisterSchema",
		append([]interface{}{ocppVersion, action, rawSchema}, opts...)...)}
}

func (_c *MockSchemaRegistry_RegisterSchema_Call) Run(run func(ocppVersion ocpp.Version, action string, rawSchema json.RawMessage, opts ...schema_registry.Option)) *MockSchemaRegistry_RegisterSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ocpp.Version
		if args[0] != nil {
			arg0 = args[0].(ocpp.Version)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 json.RawMessage
		if args[2] != nil {
			arg2 = args[2].(json.RawMessage)
		}
		var arg3 []schema_registry.Option
		var variadicArgs []schema_registry.Option
		if len(args) > 3 {
			variadicArgs = args[3].([]schema_registry.Option)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockSchemaRegistry_RegisterSchema_Call) Return(err error) *MockSchemaRegistry_RegisterSchema_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSchemaRegistry_RegisterSchema_Call) RunAndReturn(run func(ocppVersion ocpp.Version, action string, rawSchema json.RawMessage, opts ...schema_registry.Option) error) *MockSchemaRegistry_RegisterSchema_Call {
	_c.Call.Return(run)
	return _c
}
